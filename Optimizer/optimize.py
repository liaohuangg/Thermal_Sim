#!/usr/bin/env python3
import subprocess
import os
import re
import random
import time
import shutil
import matplotlib.pyplot as plt
from datetime import datetime
import csv
import glob
from PIL import Image


class Block:
    def __init__(self, name, width, height, x, y):
        self.name = name
        self.width = float(width)
        self.height = float(height)
        self.x = float(x)
        self.y = float(y)
    
    def __str__(self):
        return f"{self.name}\t{self.width:.6f}\t{self.height:.6f}\t{self.x:.6f}\t{self.y:.6f}"
    
    def copy(self):
        return Block(self.name, self.width, self.height, self.x, self.y)

class LayoutOptimizer:
    def __init__(self, config, base_path="."):
        self.config = config
        self.results_dir = os.path.join(base_path, f"results_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
        os.makedirs(self.results_dir, exist_ok=True)
        
        # 初始化历史记录
        self.history = {
            'iteration': [],
            'temperature': [],
            'layout_file': [],
            'thermal_image': [],
            'acceptance': [],
            'time': []
        }
        
        # 创建CSV文件
        with open(os.path.join(self.results_dir, "optimization_history.csv"), "w") as f:
            f.write("Iteration,Temperature,LayoutFile,ThermalImage,Acceptance,Time\n")
    
    def parse_flp(self, filename):
        """解析FLP布局文件"""
        blocks = []
        with open(filename, 'r') as f:
            for line in f:
                if line.startswith('#') or not line.strip():
                    continue
                parts = line.split()
                if len(parts) == 5:
                    blocks.append(Block(parts[0], parts[1], parts[2], parts[3], parts[4]))
        return blocks
    
    def write_flp(self, filename, blocks):
        """写入FLP布局文件"""
        with open(filename, 'w') as f:
            f.write("# Floorplan generated by optimizer\n")
            f.write("# Format: <unit-name>\t<width>\t<height>\t<left-x>\t<bottom-y>\n\n")
            for block in blocks:
                f.write(f"{block}\n")
    
    def get_chip_bounds(self, blocks):
        """获取芯片边界尺寸"""
        width = max(block.x + block.width for block in blocks)
        height = max(block.y + block.height for block in blocks)
        return width, height
    
    def perturb_layout(self, blocks, chip_width, chip_height):
        """随机扰动布局"""
        new_blocks = [block.copy() for block in blocks]
        idx = random.randint(0, len(new_blocks) - 1)
        block = new_blocks[idx]
        
        # 计算安全移动范围
        max_x = chip_width - block.width
        max_y = chip_height - block.height
        
        # 生成新位置
        block.x = random.uniform(0, max_x)
        block.y = random.uniform(0, max_y)
        
        return new_blocks
    
    def run_hotspot_simulation(self, iteration, layout_file):
        """运行HotSpot热仿真（使用原有的run.sh）"""
        iter_dir = os.path.join(self.results_dir, f"iteration_{iteration:03d}")
        os.makedirs(iter_dir, exist_ok=True)
        
        # 准备文件
        shutil.copy(layout_file, os.path.join(iter_dir, "ev6.flp"))
        for file in ["run.sh", "example.config", "gcc.ptrace", "example.materials"]:
            if os.path.exists(file):
                shutil.copy(file, iter_dir)
        
        # 运行原有的run.sh脚本
        start_time = time.time()
        try:
            # 运行脚本
            subprocess.run(["./run.sh"], cwd=iter_dir, check=True)
            
            # 创建输出目录
            out_dir = os.path.join(iter_dir, "outputs")
            os.makedirs(out_dir, exist_ok=True)
            
            # 移动生成的输出文件
            for file in glob.glob(os.path.join(iter_dir, "gcc.*")):
                if os.path.isfile(file):
                    os.rename(file, os.path.join(out_dir, os.path.basename(file)))
            
            # 移动HotSpot生成的输出目录
            if os.path.exists(os.path.join(iter_dir, "outputs")):
                for file in os.listdir(os.path.join(iter_dir, "outputs")):
                    src = os.path.join(iter_dir, "outputs", file)
                    dst = os.path.join(out_dir, file)
                    if os.path.isfile(src):
                        shutil.move(src, dst)
            
            # 解析温度
            max_temp = 0.0
            steady_file = os.path.join(out_dir, "gcc.steady")
            if os.path.exists(steady_file):
                with open(steady_file, "r") as f:
                    for line in f:
                        if line.strip():
                            parts = line.split()
                            if len(parts) >= 2:
                                try:
                                    temp = float(parts[1])
                                    max_temp = max(max_temp, temp)
                                except ValueError:
                                    continue
            
            # 获取热力图
            thermal_image = ""
            png_files = glob.glob(os.path.join(out_dir, "*.png"))
            if png_files:
                thermal_image = png_files[0]
                
                # 创建缩略图
                try:
                    img = Image.open(thermal_image)
                    img.thumbnail((300, 300))
                    thumbnail_path = os.path.join(out_dir, "thumbnail.png")
                    img.save(thumbnail_path)
                except Exception as e:
                    print(f"创建缩略图失败: {e}")
            
            elapsed_time = time.time() - start_time
            return max_temp, thermal_image, elapsed_time
        
        except Exception as e:
            print(f"仿真失败: {e}")
            elapsed_time = time.time() - start_time
            return float('inf'), "", elapsed_time
    
    def save_iteration_data(self, iteration, temperature, layout_file, thermal_image, acceptance, elapsed_time):
        """保存迭代数据"""
        self.history['iteration'].append(iteration)
        self.history['temperature'].append(temperature)
        self.history['layout_file'].append(layout_file)
        self.history['thermal_image'].append(thermal_image)
        self.history['acceptance'].append(acceptance)
        self.history['time'].append(elapsed_time)
        
        # 保存到CSV
        with open(os.path.join(self.results_dir, "optimization_history.csv"), "a") as f:
            f.write(f"{iteration},{temperature},{layout_file},{thermal_image},{acceptance},{elapsed_time}\n")
        
        # 绘制温度历史图
        plt.figure(figsize=(10, 6))
        plt.plot(self.history['iteration'], self.history['temperature'], 'bo-')
        plt.xlabel('Iteration')
        plt.ylabel('Max Temperature (K)')
        plt.title('Temperature Optimization Progress')
        plt.grid(True)
        plt.savefig(os.path.join(self.results_dir, "temperature_history.png"))
        plt.close()
    
    def generate_html_report(self):
        """生成HTML报告"""
        if not self.history['temperature']:
            print("警告: 没有足够的数据生成报告")
            return
            
        best_temp = min(self.history['temperature'])
        best_idx = self.history['temperature'].index(best_temp)
        best_iter = self.history['iteration'][best_idx]
        
        # 生成HTML内容
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Chip Thermal Optimization Report</title>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                .container {{ max-width: 1200px; margin: 0 auto; }}
                .header {{ background-color: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
                .stats {{ background-color: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-bottom: 20px; }}
                .grid-container {{ display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }}
                .card {{ background-color: white; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); padding: 15px; }}
                .card h3 {{ margin-top: 0; color: #2c3e50; }}
                .iteration-grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }}
                .iteration-card {{ background-color: white; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); padding: 15px; }}
                .iteration-card h4 {{ margin-top: 0; }}
                .iteration-card img {{ max-width: 100%; border: 1px solid #ddd; border-radius: 3px; }}
                .best {{ border: 2px solid #27ae60; }}
                .temperature-history {{ width: 100%; }}
                .summary-table {{ width: 100%; border-collapse: collapse; }}
                .summary-table th, .summary-table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                .summary-table th {{ background-color: #f2f2f2; }}
                .acceptance {{ font-weight: bold; }}
                .accepted {{ color: #27ae60; }}
                .rejected {{ color: #e74c3c; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Chip Thermal Optimization Report</h1>
                    <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                </div>
                
                <div class="stats">
                    <h2>Optimization Summary</h2>
                    <table class="summary-table">
                        <tr>
                            <th>Metric</th>
                            <th>Value</th>
                        </tr>
                        <tr>
                            <td>Total Iterations</td>
                            <td>{len(self.history['iteration'])}</td>
                        </tr>
                        <tr>
                            <td>Initial Temperature</td>
                            <td>{self.history['temperature'][0]:.2f} K</td>
                        </tr>
                        <tr>
                            <td>Best Temperature</td>
                            <td>{best_temp:.2f} K (Iteration {best_iter})</td>
                        </tr>
                        <tr>
                            <td>Temperature Reduction</td>
                            <td>{self.history['temperature'][0] - best_temp:.2f} K</td>
                        </tr>
                        <tr>
                            <td>Total Optimization Time</td>
                            <td>{sum(self.history['time']):.1f} seconds</td>
                        </tr>
                        <tr>
                            <td>Acceptance Rate</td>
                            <td>{sum(self.history['acceptance']) / len(self.history['acceptance']) * 100:.1f}%</td>
                        </tr>
                    </table>
                    
                    <h2>Temperature History</h2>
                    <img class="temperature-history" src="temperature_history.png" alt="Temperature History">
                </div>
                
                <div class="grid-container">
                    <div class="card">
                        <h3>Best Thermal Result</h3>
                        <img src="{self.history['thermal_image'][best_idx]}" alt="Best Thermal Map">
                        <p>Iteration: {best_iter}, Temperature: {best_temp:.2f} K</p>
                    </div>
                    
                    <div class="card">
                        <h3>Initial Thermal Result</h3>
                        <img src="{self.history['thermal_image'][0]}" alt="Initial Thermal Map">
                        <p>Iteration: 0, Temperature: {self.history['temperature'][0]:.2f} K</p>
                    </div>
                </div>
                
                <h2>Iteration History</h2>
                <div class="iteration-grid">
        """
        
        # 添加迭代卡片
        for i in range(len(self.history['iteration'])):
            iteration = self.history['iteration'][i]
            temp = self.history['temperature'][i]
            layout_file = self.history['layout_file'][i]
            thermal_image = self.history['thermal_image'][i]
            accepted = "Accepted" if self.history['acceptance'][i] else "Rejected"
            
            # 使用缩略图
            thumbnail = thermal_image
            if thermal_image:
                thumbnail_dir = os.path.dirname(thermal_image)
                thumbnail_path = os.path.join(thumbnail_dir, "thumbnail.png")
                if os.path.exists(thumbnail_path):
                    thumbnail = thumbnail_path
            
            html += f"""
                    <div class="iteration-card {'best' if i == best_idx else ''}">
                        <h4>Iteration {iteration}</h4>
                        <p>Temperature: {temp:.2f} K</p>
                        <p>Status: <span class="acceptance {'accepted' if self.history['acceptance'][i] else 'rejected'}">{accepted}</span></p>
                        <img src="{thumbnail}" alt="Thermal Map Iteration {iteration}">
                        <p>Layout: {os.path.basename(layout_file)}</p>
                    </div>
            """
        
        html += """
                </div>
            </div>
        </body>
        </html>
        """
        
        # 写入文件
        with open(os.path.join(self.results_dir, "report.html"), "w") as f:
            f.write(html)
    
    def optimize(self):
        """执行优化过程"""
        # 读取配置
        print("===start optimize===")
        initial_temp = self.config.get("initial_temp", 100.0)
        cooling_rate = self.config.get("cooling_rate", 0.95)
        max_iterations = self.config.get("max_iterations", 50)
        layout_file = self.config.get("layout_file", "ev6.flp")
        
        # 检查布局文件是否存在
        if not os.path.exists(layout_file):
            print(f"错误: 找不到布局文件 {layout_file}")
            return
        
        # 解析布局文件
        blocks = self.parse_flp(layout_file)
        chip_width, chip_height = self.get_chip_bounds(blocks)
        
        # 初始仿真
        print("运行初始仿真...")
        current_temp, thermal_img, elapsed_time = self.run_hotspot_simulation(0, layout_file)
        
        # 保存初始数据
        self.save_iteration_data(0, current_temp, layout_file, thermal_img, True, elapsed_time)
        print(f"初始温度: {current_temp:.2f} K")
        
        best_temp = current_temp
        best_blocks = [b.copy() for b in blocks]
        current_blocks = [b.copy() for b in blocks]
        
        # 优化循环
        print(f"\n开始优化，共 {max_iterations} 次迭代...")
        for i in range(1, max_iterations + 1):
            print(f"\n迭代 {i}/{max_iterations}:")
            
            # 生成新布局
            new_blocks = self.perturb_layout(current_blocks, chip_width, chip_height)
            temp_file = f"temp_{i}.flp"
            self.write_flp(temp_file, new_blocks)
            
            # 运行仿真
            print("运行热仿真...")
            new_temp, thermal_img, elapsed_time = self.run_hotspot_simulation(i, temp_file)
            
            # 接受概率计算
            delta_temp = new_temp - current_temp
            accept_prob = min(1.0, pow(2.718, -delta_temp / initial_temp))
            accepted = False
            
            # 更新状态
            if delta_temp < 0 or random.random() < accept_prob:
                accepted = True
                current_temp = new_temp
                current_blocks = new_blocks
                
                if new_temp < best_temp:
                    best_temp = new_temp
                    best_blocks = [b.copy() for b in current_blocks]
                    print(f"🔥 新最佳温度: {best_temp:.2f} K")
            
            # 保存迭代数据
            self.save_iteration_data(i, new_temp, f"iteration_{i:03d}/ev6.flp", thermal_img, accepted, elapsed_time)
            print(f"温度: {new_temp:.2f} K, 耗时: {elapsed_time:.1f}秒, 状态: {'接受' if accepted else '拒绝'}")
            
            # 降温
            initial_temp *= cooling_rate
            
            # 清理临时文件
            if os.path.exists(temp_file):
                os.remove(temp_file)
        
        # 保存最佳布局
        best_layout_path = os.path.join(self.results_dir, "best_layout.flp")
        self.write_flp(best_layout_path, best_blocks)
        
        # 生成报告
        print("\n生成优化报告...")
        self.generate_html_report()
        
        print("\n" + "="*50)
        print(f"优化完成! 最佳温度: {best_temp:.2f} K")
        print(f"最佳布局保存至: {best_layout_path}")
        print(f"完整结果保存至: {self.results_dir}")
        print(f"HTML报告: {os.path.join(self.results_dir, 'report.html')}")
        print("="*50)

if __name__ == "__main__":
    # 配置参数
    config = {
        "layout_file": "ev6.flp",          # 布局文件
        "initial_temp": 100.0,             # 初始温度（模拟退火）
        "cooling_rate": 0.95,               # 降温速率
        "max_iterations": 1                # 最大迭代次数（建议20-50）
    }
    
    # 显示欢迎信息
    print("===start===")
    # print("="*50)
    # print("芯片热优化系统 - 自动化布局设计")
    # print("="*50)
    # print("本系统将自动进行以下操作:")
    # print("1. 读取初始布局文件 (ev6.flp)")
    # print("2. 运行热仿真获取初始温度")
    # print("3. 使用模拟退火算法优化布局")
    # print("4. 每次迭代生成新布局并运行热仿真")
    # print("5. 记录所有迭代结果并生成可视化报告")
    # print("="*50)

    # 定义需要的文件，优先从环境变量取路径，否则用默认文件名
    FILE_CONFIG = {
        "run_sh": os.getenv("RUN_SH", "run.sh"),
        "example_config": os.getenv("EXAMPLE_CONFIG", "example.config"),
        "gcc_ptrace": os.getenv("GCC_PTRACE", "gcc.ptrace"),
        "example_materials": os.getenv("EXAMPLE_MATERIALS", "example.materials"),
        "ev6_flp": os.getenv("EV6_FLP", "ev6.flp")
    }

   # 提取所有文件路径
    required_files = list(FILE_CONFIG.values())

    # 检查缺失文件
    missing_files = [f for f in required_files if not os.path.exists(f)]

    if missing_files:
        print("错误：缺少必要文件:")
        for f in missing_files:
            print(f" - {f}")
        print("提示：可通过环境变量指定路径，例如：")
        print(" export RUN_SH=/path/to/run.sh")
        exit(1)
    
    # 创建优化器并运行
    optimizer = LayoutOptimizer(config, "/root/Experiment/Thermal_Sim/output/")
    optimizer.optimize()